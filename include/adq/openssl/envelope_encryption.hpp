#pragma once

#include "envelope_key.hpp"
#include "pointers.hpp"

#include <vector>

namespace openssl {

/**
 * Enumerates the types of cipher algorithms that can be used in OpenSSL encryption
 * functions.
 */
enum class CipherAlgorithm {
    AES128_CBC,
    AES128_CFB,
    AES128_CTR,
    AES256_CBC,
    AES256_CFB,
    AES256_CTR,
    AES128_CCM,
    AES128_GCM,
    AES256_CCM,
    AES256_GCM
};

/**
 * Returns a constant EVP_CIPHER pointer that indicates a specific symmetric
 * cipher type for use as a parameter in OpenSSL functions. This pointer does
 * not need to be deleted.
 *
 * @param algorithm_type A CipherAlgorithm value representing the desired cipher type
 */
const EVP_CIPHER* get_cipher_type_ptr(CipherAlgorithm algorithm_type);


class EnvelopeEncryptor {
    EnvelopeKey public_key;
    CipherAlgorithm cipher_type;
    std::unique_ptr<EVP_CIPHER_CTX, DeleterFor<EVP_CIPHER_CTX>> cipher_context;

public:
    /**
     * Constructs an EnvelopeEncryptor that can encrypt envelopes with a specific
     * target's public key, using the specified cipher algorithm.
     *
     * @param target_public_key The public key of the encrypted message's destination
     * @param cipher_algorithm The type of symmetric cipher to use to encrypt the message's body
     */
    EnvelopeEncryptor(const EnvelopeKey& target_public_key, CipherAlgorithm cipher_algorithm);

    /**
     * @return The size in bytes of the IV (initialization vector) that will be
     * generated by this encryptor when it generates a session key.
     */
    int get_IV_size();

    /**
     * @return The size in bytes of an encrypted session key that will be generated
     * by this encryptor; this is equal to get_max_size() for the public key
     */
    int get_encrypted_key_size();

    /**
     * @return The size in bytes of one block of ciphertext that will be produced
     * by this encryptor; this can be used to compute the required size of the
     * output buffer, which is equal to the size of the input buffer rounded up to
     * the nearest multiple of the block size. The block size depends on the chosen
     * cipher algorithm.
     */
    int get_cipher_block_size();

    /**
     * Computes the correct size for an output buffer to contain the ciphertext
     * based on the size of the input data buffer. The encrypted data is almost
     * the same size as the input data, except it is rounded up to the next
     * multiple of the cipher's block size.
     *
     * @param input_buffer_size The number of bytes the caller would like to
     * encrypt with this encryptor
     * @return The number of bytes of ciphertext that would be generated by
     * encrypting a buffer of that size
     */
    std::size_t compute_output_buffer_size(std::size_t input_buffer_size);

    /**
     * Initializes this encryptor to start encrypting a single envelope with the
     * recipient's public key. This will generate a session key and IV value,
     * encrypt the session key with the public key, and place the encrypted key
     * and IV in the buffers provided by the caller.
     *
     * @param encrypted_key_buffer A pointer to a byte array in which the new
     * encrypted session key will be written by this function
     * @param iv_buffer A pointer to a byte array in which the new session IV
     * will be written by this function
     */
    void init(unsigned char* encrypted_key_buffer, unsigned char* iv_buffer);

    /**
     * Encrypts some bytes using this encryptor's session key, assuming init() has
     * already been called, and places the encrypted bytes in the provided output
     * buffer, assuming it is long enough for the ciphertext. Returns the number of
     * bytes actually written.
     *
     * @param input_buffer A pointer to a byte array to encrypt
     * @param input_size The length of the byte array to encrypt
     * @param output_buffer A pointer to a buffer in which the encrypted data should be written
     * @return The number of bytes of ciphertext written to the output buffer
     */
    std::size_t encrypt_bytes(const unsigned char* input_buffer, std::size_t input_size, unsigned char* output_buffer);

    /**
     * Finalizes the encryption by writing the last block of ciphertext to the output
     * buffer. Returns the number of bytes actually written.
     *
     * @param output_buffer A pointer to a buffer in which encrypted data should be written
     * @return The number of bytes written to the output buffer
     */
    std::size_t finalize(unsigned char* output_buffer);

    /**
     * A convenience method that initializes a new session, encrypts a byte buffer,
     * and then places the encrypted session key, IV value, and ciphertext bytes into
     * a single new byte buffer that is then returned in a std::vector<unsigned char>.
     *
     * @param input_bytes A pointer to a byte array to encrypt
     * @param input_size The size of the byte array
     * @return An array of bytes containing, in order, the encrypted session key, the
     * IV bytes, and then the ciphertext bytes.
     */
    std::vector<unsigned char> make_encrypted_message(const unsigned char* input_bytes, std::size_t input_size);
};

class EnvelopeDecryptor {
    EnvelopeKey private_key;
    CipherAlgorithm cipher_type;
    std::unique_ptr<EVP_CIPHER_CTX, DeleterFor<EVP_CIPHER_CTX>> cipher_context;

public:
    /**
     * Constructs an EnvelopeDecryptor that can decrypt envelope-encrypted messages
     * with a known private key, using the specified cipher algorithm.
     *
     * @param private_key The private key to use to decrypt messages
     * @param algorithm_type The cipher algorithm to use when decrypting
     */
    EnvelopeDecryptor(const EnvelopeKey& private_key, CipherAlgorithm algorithm_type);
    /**
     * @return The size in bytes of the IV (initialization vector) that this encryptor
     * needs along with an encrypted session key. This is derived from the cipher algorithm.
     */
    int get_IV_size();

    /**
     * @return The size in bytes of an encrypted session key that this decryptor will
     * expect to read during initialization, based on the configured private key.
     */
    int get_encrypted_key_size();

    /**
     * Initializes this decryptor to start decrypting an envelope-encrypted message,
     * given the envelope's encrypted session key and IV value.
     *
     * @param encrypted_key_buffer A pointer to a byte array containing the encrypted
     * session key. It must be the size defined by get_encrypted_key_size().
     * @param iv_buffer A pointer to a byte array containing the session key's IV.
     * It must be the size defined by get_iv_size().
     */
    void init(const unsigned char* encrypted_key_buffer, const unsigned char* iv_buffer);
    /**
     * Decrypts some bytes using the current session key, assuming init() has already
     * been called. Returns the number of bytes actually written.
     *
     * @param input_buffer A pointer to a byte array to decrypt
     * @param input_size The size of the input array in bytes
     * @param output_buffer A pointer to a buffer in which the decrypted data should be written
     * @return The number of bytes of plaintext written to the output buffer
     */
    std::size_t decrypt_bytes(const unsigned char* input_buffer, std::size_t input_size, unsigned char* output_buffer);
    /**
     * Finalizes the decryption, writing out any remaining data to the buffer.
     * Returns the number of bytes actually written.
     *
     * @param output_buffer A pointer to a buffer in which the decrypted data should be written
     * @return The number of bytes of plaintext written to the output buffer
     */
    std::size_t finalize(unsigned char* output_buffer);
};

}